#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##################### Configuration of 'userdb' by group sharding v5 #######################

# External logical database schema.
schemaName: userdb

# Default datasource configuration.
# @see:org.apache.shardingsphere.proxy.config.ProxyConfigurationLoader#loadRuleConfiguration
dataSource:
  username: root
  #password: 'zzx!@#$%'
  password: root  
  connectionTimeoutMilliseconds: 30000
  idleTimeoutMilliseconds: 60000
  maxLifetimeMilliseconds: 1800000
  maxPoolSize: 50
  minPoolSize: 1
  maintenanceIntervalMilliseconds: 30000

# Datasource configuration.
dataSources:
  primary_userdb_g0db0_1:
    url: jdbc:mysql://127.0.0.1:13306/userdb_g0db0?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  standby_userdb_g0db0_1:
    url: jdbc:mysql://127.0.0.1:13307/userdb_g0db0?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  standby_userdb_g0db0_2:
    url: jdbc:mysql://127.0.0.1:13308/userdb_g0db0?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  primary_userdb_g0db1_1:
    url: jdbc:mysql://127.0.0.1:13306/userdb_g0db1?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  standby_userdb_g0db1_1:
    url: jdbc:mysql://127.0.0.1:13307/userdb_g0db1?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  standby_userdb_g0db1_2:
    url: jdbc:mysql://127.0.0.1:13308/userdb_g0db1?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  primary_userdb_g0db2_1:
    url: jdbc:mysql://127.0.0.1:13306/userdb_g0db2?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  standby_userdb_g0db2_1:
    url: jdbc:mysql://127.0.0.1:13307/userdb_g0db2?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8
  standby_userdb_g0db2_2:
    url: jdbc:mysql://127.0.0.1:13308/userdb_g0db2?serverTimezone=UTC&useSSL=false&allowMultiQueries=true&characterEncoding=utf-8

# Schema rule configuration.
rules:
#################################### Sharding DB group0 ####################################
 - !SHARDING
  tables:
    t_user:
      actualDataNodes: ha_userdb_g0db${0..2}.t_user_${0..2}
      #actualDataNodes: 'ha_userdb_g0db0.t_user_${0..3},ha_userdb_g0db1.t_user_${0..2},ha_userdb_g0db2.t_user_${0..2},ha_userdb_g0db${0..2}.t_user_${0..2}'
      #databaseStrategy:
      tableStrategy:
        standard:
          shardingColumn: id
          shardingAlgorithmName: group0_table_volume_range
      keyGenerateStrategy:
        column: id
        keyGeneratorName: group0_snowflake1
  bindingTables:
    - t_user
  defaultDatabaseStrategy:
    standard:
      shardingColumn: id
      shardingAlgorithmName: group0_database_inline
      #shardingAlgorithmName: composite_smart_mod1
  defaultTableStrategy:
  shardingAlgorithms:
    #composite_smart_mod1:
    #  type: SMART_MOD
    #  props:
    #    algorithm-expression: '_g0db0->0,1,2,3|_g0db1->4,5,6|_g0db2->7,8,9'
    group0_database_inline:
      type: INLINE
      props:
        algorithm-expression: ha_userdb_g0db${(id % 9) as int}
    group0_table_volume_range: # see:org.apache.shardingsphere.sharding.algorithm.sharding.range.VolumeBasedRangeShardingAlgorithm
      type: VOLUME_RANGE2
      props: # Must use quotation marks(string) or you cannot get them.
        range-lower: '0'
        range-upper: '40000000'
        sharding-volume: '10000000'
  keyGenerators:
    group0_snowflake1:
      type: SNOWFLAKE
      props:
        worker-id: '1' # Range[0, 1024), see:org.apache.shardingsphere.sharding.algorithm.keygen.SnowflakeKeyGenerateAlgorithm#getWorkerId()
 - !READWRITE_SPLITTING
  dataSources:
    ha_userdb_g0db0:
      writeDataSourceName: primary_userdb_g0db0_1
      readDataSourceNames:
        - standby_userdb_g0db0_1
        - standby_userdb_g0db0_2
      loadBalancerName: randomBalancer1
    ha_userdb_g0db1:
      writeDataSourceName: primary_userdb_g0db1_1
      readDataSourceNames:
        - standby_userdb_g0db1_1
        - standby_userdb_g0db1_2
      loadBalancerName: randomBalancer1
    ha_userdb_g0db2:
      writeDataSourceName: primary_userdb_g0db2_1
      readDataSourceNames:
        - standby_userdb_g0db2_1
        - standby_userdb_g0db2_2
      loadBalancerName: randomBalancer1
  loadBalancers:
    randomBalancer1:
      type: RANDOM
